{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\uhemv\\\\Desktop\\\\money clack\\\\main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\"; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteCalculator = () => {\n  _s();\n  const [notes, setNotes] = useState({\n    20: 0,\n    10: 0,\n    5: 0,\n    2: 0,\n    1: 0,\n    0.5: 0,\n    0.2: 0,\n    0.1: 0,\n    0.05: 0\n  });\n  const [total, setTotal] = useState(0);\n  const [exceedsThreshold, setExceedsThreshold] = useState(false);\n  const [notesToTakeOut, setNotesToTakeOut] = useState({});\n  const [totalAfterDrop, setTotalAfterDrop] = useState(0);\n  useEffect(() => {\n    document.title = \"Note Calculator\"; // Change the title when the component mounts\n  }, []);\n  const calculateTotal = () => {\n    let sum = 0;\n    for (const [note, count] of Object.entries(notes)) {\n      sum += parseFloat(note) * count;\n    }\n    setTotal(sum);\n    if (sum >= 300) {\n      setExceedsThreshold(true);\n      calculateNotesToTakeOut(sum - 300);\n    } else {\n      setExceedsThreshold(false);\n      setNotesToTakeOut({});\n      setTotalAfterDrop(sum);\n    }\n  };\n  const calculateNotesToTakeOut = amount => {\n    const notesToTakeOut = {};\n    const allowedNotes = [{\n      note: 20,\n      minRemaining: 2\n    }, {\n      note: 10,\n      minRemaining: 5\n    }, {\n      note: 5,\n      minRemaining: 5\n    }];\n    let remainingAmount = amount;\n    allowedNotes.forEach(({\n      note,\n      minRemaining\n    }) => {\n      const availableToTakeOut = notes[note] - minRemaining;\n      if (availableToTakeOut > 0) {\n        const noteCount = Math.min(Math.floor(remainingAmount / note), availableToTakeOut);\n        if (noteCount > 0) {\n          notesToTakeOut[note] = noteCount;\n          remainingAmount -= noteCount * note;\n        }\n      }\n    });\n    setNotesToTakeOut(notesToTakeOut);\n\n    // Calculate the new total after taking out the necessary notes\n    let newTotal = total;\n    for (const [note, count] of Object.entries(notesToTakeOut)) {\n      newTotal -= parseFloat(note) * count;\n    }\n    setTotalAfterDrop(newTotal);\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const newNotes = {\n      ...notes,\n      [name]: parseInt(value) || 0\n    };\n    setNotes(newNotes);\n    calculateTotal();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Note Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), Object.keys(notes).map(note => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"$\", note, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: note,\n        value: notes[note],\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, note, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total: $\", total.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), exceedsThreshold && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You need to take out the following notes to reduce the sum to less than $300:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: Object.entries(notesToTakeOut).map(([denomination, count]) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"$\", denomination, \" - \", count, \" note\", count > 1 ? \"s\" : \"\"]\n          }, denomination, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Total after Drop: $\", totalAfterDrop.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteCalculator, \"lDPaJj+DsDg0KY95CVwaJdUVivs=\");\n_c = NoteCalculator;\nexport default NoteCalculator;\nvar _c;\n$RefreshReg$(_c, \"NoteCalculator\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NoteCalculator","_s","notes","setNotes","total","setTotal","exceedsThreshold","setExceedsThreshold","notesToTakeOut","setNotesToTakeOut","totalAfterDrop","setTotalAfterDrop","document","title","calculateTotal","sum","note","count","Object","entries","parseFloat","calculateNotesToTakeOut","amount","allowedNotes","minRemaining","remainingAmount","forEach","availableToTakeOut","noteCount","Math","min","floor","newTotal","handleChange","e","name","value","target","newNotes","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","keys","map","type","onChange","toFixed","denomination","_c","$RefreshReg$"],"sources":["C:/Users/uhemv/Desktop/money clack/main/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport \"./App.css\" // Import the CSS file\n\nconst NoteCalculator = () => {\n  const [notes, setNotes] = useState({\n    20: 0,\n    10: 0,\n    5: 0,\n    2: 0,\n    1: 0,\n    0.5: 0,\n    0.2: 0,\n    0.1: 0,\n    0.05: 0,\n  })\n  const [total, setTotal] = useState(0)\n  const [exceedsThreshold, setExceedsThreshold] = useState(false)\n  const [notesToTakeOut, setNotesToTakeOut] = useState({})\n  const [totalAfterDrop, setTotalAfterDrop] = useState(0)\n\n  useEffect(() => {\n    document.title = \"Note Calculator\" // Change the title when the component mounts\n  }, [])\n\n  const calculateTotal = () => {\n    let sum = 0\n    for (const [note, count] of Object.entries(notes)) {\n      sum += parseFloat(note) * count\n    }\n    setTotal(sum)\n    if (sum >= 300) {\n      setExceedsThreshold(true)\n      calculateNotesToTakeOut(sum - 300)\n    } else {\n      setExceedsThreshold(false)\n      setNotesToTakeOut({})\n      setTotalAfterDrop(sum)\n    }\n  }\n\n  const calculateNotesToTakeOut = (amount) => {\n    const notesToTakeOut = {}\n    const allowedNotes = [\n      { note: 20, minRemaining: 2 },\n      { note: 10, minRemaining: 5 },\n      { note: 5, minRemaining: 5 },\n    ]\n    let remainingAmount = amount\n\n    allowedNotes.forEach(({ note, minRemaining }) => {\n      const availableToTakeOut = notes[note] - minRemaining\n      if (availableToTakeOut > 0) {\n        const noteCount = Math.min(\n          Math.floor(remainingAmount / note),\n          availableToTakeOut\n        )\n        if (noteCount > 0) {\n          notesToTakeOut[note] = noteCount\n          remainingAmount -= noteCount * note\n        }\n      }\n    })\n\n    setNotesToTakeOut(notesToTakeOut)\n\n    // Calculate the new total after taking out the necessary notes\n    let newTotal = total\n    for (const [note, count] of Object.entries(notesToTakeOut)) {\n      newTotal -= parseFloat(note) * count\n    }\n    setTotalAfterDrop(newTotal)\n  }\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    const newNotes = { ...notes, [name]: parseInt(value) || 0 }\n    setNotes(newNotes)\n    calculateTotal()\n  }\n\n  return (\n    <div className=\"container\">\n      <h2>Note Calculator</h2>\n      {Object.keys(notes).map((note) => (\n        <div key={note}>\n          <label>${note}:</label>\n          <input\n            type=\"number\"\n            name={note}\n            value={notes[note]}\n            onChange={handleChange}\n          />\n        </div>\n      ))}\n      <div>\n        <h3>Total: ${total.toFixed(2)}</h3>\n        {exceedsThreshold && (\n          <div>\n            <p>\n              You need to take out the following notes to reduce the sum to less\n              than $300:\n            </p>\n            <ul>\n              {Object.entries(notesToTakeOut).map(([denomination, count]) => (\n                <li key={denomination}>\n                  ${denomination} - {count} note{count > 1 ? \"s\" : \"\"}\n                </li>\n              ))}\n            </ul>\n            <div>Total after Drop: ${totalAfterDrop.toFixed(2)}</div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default NoteCalculator\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}