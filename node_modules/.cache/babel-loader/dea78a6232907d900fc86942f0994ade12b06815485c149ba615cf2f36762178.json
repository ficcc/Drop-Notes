{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\uhemv\\\\Desktop\\\\money clack\\\\moneycalc\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteCalculator = () => {\n  _s();\n  const [notes, setNotes] = useState({\n    20: 0,\n    10: 0,\n    5: 0,\n    2: 0,\n    1: 0,\n    0.5: 0,\n    0.2: 0,\n    0.1: 0,\n    0.05: 0\n  });\n  const [total, setTotal] = useState(0);\n  const [exceeds300, setExceeds300] = useState(false);\n  const [notesToTakeOut, setNotesToTakeOut] = useState({});\n  const calculateTotal = () => {\n    let sum = 0;\n    for (const [note, count] of Object.entries(notes)) {\n      sum += note * count;\n    }\n    setTotal(sum);\n    if (sum > 300) {\n      setExceeds300(true);\n      calculateNotesToTakeOut(sum - 300);\n    } else {\n      setExceeds300(false);\n    }\n  };\n  const calculateNotesToTakeOut = amount => {\n    const notesToTakeOut = {};\n    const sortedNotes = Object.keys(notes).sort((a, b) => b - a);\n    let remainingAmount = amount;\n    sortedNotes.forEach(note => {\n      const noteValue = parseFloat(note);\n      const noteCount = Math.min(Math.floor(remainingAmount / noteValue), notes[note]);\n      if (noteCount > 0) {\n        notesToTakeOut[note] = noteCount;\n        remainingAmount -= noteCount * noteValue;\n      }\n    });\n    setNotesToTakeOut(notesToTakeOut);\n  };\n  const handleNoteChange = (value, note) => {\n    const newNotes = {\n      ...notes,\n      [note]: value\n    };\n    setNotes(newNotes);\n    calculateTotal();\n  };\n  function StackScreen() {\n    return /*#__PURE__*/_jsxDEV(Stack.Navigator, {\n      children: /*#__PURE__*/_jsxDEV(Stack.Screen, {\n        name: \"Home\",\n        component: HomeScreen,\n        options: {\n          title: \"My home\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Note Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notes-container\",\n        children: Object.entries(notes).map(([note, count]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notes\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: `$${note}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: count,\n            onChange: e => handleNoteChange(parseInt(e.target.value), note)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, note, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"total\",\n      children: [\"Total: $\", total]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), exceeds300 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-to-take-out\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Notes to take out to make total less than or equal to $300:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), Object.entries(notesToTakeOut).map(([note, count]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: `Take out ${count} of $${note}`\n        }, note, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteCalculator, \"fFktDG8wJl0V/njM7wfDEXgI6VM=\");\n_c = NoteCalculator;\nexport default NoteCalculator;\nvar _c;\n$RefreshReg$(_c, \"NoteCalculator\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NoteCalculator","_s","notes","setNotes","total","setTotal","exceeds300","setExceeds300","notesToTakeOut","setNotesToTakeOut","calculateTotal","sum","note","count","Object","entries","calculateNotesToTakeOut","amount","sortedNotes","keys","sort","a","b","remainingAmount","forEach","noteValue","parseFloat","noteCount","Math","min","floor","handleNoteChange","value","newNotes","StackScreen","Stack","Navigator","children","Screen","name","component","HomeScreen","options","title","fileName","_jsxFileName","lineNumber","columnNumber","className","map","type","onChange","e","parseInt","target","_c","$RefreshReg$"],"sources":["C:/Users/uhemv/Desktop/money clack/moneycalc/src/App.js"],"sourcesContent":["import React, { useState } from \"react\"\n\nconst NoteCalculator = () => {\n  const [notes, setNotes] = useState({\n    20: 0,\n    10: 0,\n    5: 0,\n    2: 0,\n    1: 0,\n    0.5: 0,\n    0.2: 0,\n    0.1: 0,\n    0.05: 0,\n  })\n  const [total, setTotal] = useState(0)\n  const [exceeds300, setExceeds300] = useState(false)\n  const [notesToTakeOut, setNotesToTakeOut] = useState({})\n\n  const calculateTotal = () => {\n    let sum = 0\n    for (const [note, count] of Object.entries(notes)) {\n      sum += note * count\n    }\n    setTotal(sum)\n    if (sum > 300) {\n      setExceeds300(true)\n      calculateNotesToTakeOut(sum - 300)\n    } else {\n      setExceeds300(false)\n    }\n  }\n\n  const calculateNotesToTakeOut = (amount) => {\n    const notesToTakeOut = {}\n    const sortedNotes = Object.keys(notes).sort((a, b) => b - a)\n    let remainingAmount = amount\n    sortedNotes.forEach((note) => {\n      const noteValue = parseFloat(note)\n      const noteCount = Math.min(\n        Math.floor(remainingAmount / noteValue),\n        notes[note]\n      )\n      if (noteCount > 0) {\n        notesToTakeOut[note] = noteCount\n        remainingAmount -= noteCount * noteValue\n      }\n    })\n    setNotesToTakeOut(notesToTakeOut)\n  }\n\n  const handleNoteChange = (value, note) => {\n    const newNotes = { ...notes, [note]: value }\n    setNotes(newNotes)\n    calculateTotal()\n  }\n\n  function StackScreen() {\n    return (\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Home\"\n          component={HomeScreen}\n          options={{ title: \"My home\" }}\n        />\n      </Stack.Navigator>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Note Calculator</h1>\n      <div className=\"container\">\n        <div className=\"notes-container\">\n          {Object.entries(notes).map(([note, count]) => (\n            <div className=\"notes\" key={note}>\n              <span>{`$${note}`}</span>\n              <input\n                type=\"number\"\n                value={count}\n                onChange={(e) =>\n                  handleNoteChange(parseInt(e.target.value), note)\n                }\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"total\">Total: ${total}</div>\n      {exceeds300 && (\n        <div className=\"container\">\n          <div className=\"note-to-take-out\">\n            <h2>Notes to take out to make total less than or equal to $300:</h2>\n            {Object.entries(notesToTakeOut).map(([note, count]) => (\n              <div key={note}>{`Take out ${count} of $${note}`}</div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default NoteCalculator\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}